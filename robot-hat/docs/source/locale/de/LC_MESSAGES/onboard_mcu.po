# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2023, SunFounder
# This file is distributed under the same license as the SunFounder Robot
# HAT package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: SunFounder Robot HAT \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-02 10:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: de\n"
"Language-Team: de <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.12.1\n"

#: ../onboard_mcu.rst:4
msgid "On-Board MCU"
msgstr "On-Board-MCU"

#: ../onboard_mcu.rst:6
msgid ""
"The Robot HAT comes with an AT32F413CBT7 microcontroller from Artery. It "
"is an ARM Cortex-M4 processor with a maximum clock frequency of 200MHz. "
"The microcontroller has 128KB of Flash memory and 32KB of SRAM."
msgstr ""
"Der Robot HAT ist mit einem AT32F415CBT7 Mikrocontroller von Artery ausgestattet. Es handelt sich um einen ARM Cortex-M4 Prozessor mit einer maximalen Taktfrequenz von 150MHz. Der Mikrocontroller verfügt über 256KB Flash-Speicher und 32KB SRAM."

#: ../onboard_mcu.rst:8
msgid ""
"The onboard PWM and ADC are driven by the microcontroller. Communication "
"between the Raspberry Pi and the microcontroller is established via the "
"I2C interface. The I2C address used for communication is 0x14 (7-bit "
"address format)."
msgstr ""
"Das Onboard-PWM und ADC werden vom Mikrocontroller gesteuert. Die "
"Kommunikation zwischen dem Raspberry Pi und dem Mikrocontroller erfolgt "
"über die I2C-Schnittstelle. Die für die Kommunikation verwendete I2C-"
"Adresse ist 0x14 (7-Bit-Adressformat)."

#: ../onboard_mcu.rst:14
msgid "Introduce"
msgstr "Einführung"

#: ../onboard_mcu.rst:16
msgid ""
"The on board MCU RESET pin is connected to Raspberry Pi GPIO 5, or "
"``MCURST`` for :py:class:`robot_hat.Pin`. The MCU using 7-bit address "
"``0x14``."
msgstr ""
"Der RESET-Pin des Onboard-MCU ist mit dem Raspberry Pi GPIO 5 oder "
"``MCURST`` für :py:class:`robot_hat.Pin` verbunden. Der MCU verwendet die"
" 7-Bit-Adresse ``0x14``."

#: ../onboard_mcu.rst:19
msgid "ADC"
msgstr "ADC"

#: ../onboard_mcu.rst:21
msgid ""
"Register addresses is 3 byte, 0x170000 to 0x140000 are ADC channels 0 to "
"3. The ADC precision is 12 bit, and the value is 0 to 4095. See more "
"details in :py:class:`robot_hat.ADC`."
msgstr ""
"Registeradressen sind 3 Byte, von 0x170000 bis 0x140000 sind es ADC-"
"Kanäle 0 bis 3. Die ADC-Präzision beträgt 12 Bit, und der Wert liegt "
"zwischen 0 und 4095. Weitere Einzelheiten finden Sie in "
":py:class:`robot_hat.ADC`."

#: ../onboard_mcu.rst:28 ../onboard_mcu.rst:90 ../onboard_mcu.rst:130
#: ../onboard_mcu.rst:150
msgid "Address"
msgstr "Adresse"

#: ../onboard_mcu.rst:28 ../onboard_mcu.rst:90 ../onboard_mcu.rst:130
#: ../onboard_mcu.rst:150
msgid "Description"
msgstr "Beschreibung"

#: ../onboard_mcu.rst:30
msgid "``0x170000``"
msgstr "``0x170000``"

#: ../onboard_mcu.rst:30
msgid "ADC channel 0"
msgstr "ADC-Kanal 0"

#: ../onboard_mcu.rst:32
msgid "``0x160000``"
msgstr "``0x160000``"

#: ../onboard_mcu.rst:32
msgid "ADC channel 1"
msgstr "ADC-Kanal 1"

#: ../onboard_mcu.rst:34
msgid "``0x150000``"
msgstr "``0x150000``"

#: ../onboard_mcu.rst:34
msgid "ADC channel 2"
msgstr "ADC-Kanal 2"

#: ../onboard_mcu.rst:36
msgid "``0x140000``"
msgstr "``0x140000``"

#: ../onboard_mcu.rst:36
msgid "ADC channel 3"
msgstr "ADC-Kanal 3"

#: ../onboard_mcu.rst:38
msgid "``0x130000``"
msgstr "``0x130000``"

#: ../onboard_mcu.rst:38
msgid "ADC channel 4 (Battery Level)"
msgstr "ADC-Kanal 4 (Batteriestand)"

#: ../onboard_mcu.rst:41
msgid "**Example:**"
msgstr "**Beispiel:**"

#: ../onboard_mcu.rst:43
msgid "Read Channel 0 ADC value:"
msgstr "ADC-Wert des Kanals 0 lesen:"

#: ../onboard_mcu.rst:58
msgid "PWM"
msgstr "PWM"

#: ../onboard_mcu.rst:60
msgid "PWM have 1 byte register with 2 byte values."
msgstr "PWM hat ein 1-Byte-Register mit 2-Byte-Werten."

#: ../onboard_mcu.rst:63
msgid "Changing PWM Frequency"
msgstr "Ändern der PWM-Frequenz"

#: ../onboard_mcu.rst:65
msgid "Frequency is defined with prescaler and period."
msgstr "Die Frequenz wird mit Vorwähler und Periode definiert."

#: ../onboard_mcu.rst:67
msgid ""
"To set frequency first you need to define the period you want. Like on "
"Arduino, normaly is 255, or like PCA9685 is 4095."
msgstr ""
"Um die Frequenz einzustellen, müssen Sie zuerst die gewünschte Periode "
"definieren. Wie bei Arduino ist dies normalerweise 255, oder wie bei "
"PCA9685 4095."

#: ../onboard_mcu.rst:70
msgid ""
"CPU clock is 72MHz, Then you can calculate the prescaler from your desire"
" frequency"
msgstr ""
"Die CPU-Taktfrequenz beträgt 72 MHz. Dann können Sie den Vorwähler aus "
"Ihrer gewünschten Frequenz berechnen"

#: ../onboard_mcu.rst:73
msgid "prescaler = 72MHz / (Period + 1) / Frequency - 1"
msgstr "Vorwähler = 72MHz / (Periode + 1) / Frequenz - 1"

#: ../onboard_mcu.rst:75
msgid ""
"Or if you don't care about the period, there's a way to calculate both "
"period and prescaler from frequency. See :py:func:`robot_hat.PWM.freq`."
msgstr ""
"Wenn Ihnen die Periode egal ist, gibt es eine Möglichkeit, sowohl die "
"Periode als auch den Vorwähler aus der Frequenz zu berechnen. Siehe "
":py:func:`robot_hat.PWM.freq`."

#: ../onboard_mcu.rst:79
msgid "Pulse width"
msgstr "Pulsbreite"

#: ../onboard_mcu.rst:81
msgid ""
"To control the channel pulse width is rather simple, just write the value"
" to the register."
msgstr ""
"Die Kontrolle der Pulsbreite des Kanals ist recht einfach, schreiben Sie "
"einfach den Wert in das Register."

#: ../onboard_mcu.rst:83
msgid ""
"**But** what is the value? If you want to set the PWM to 50% pulse width,"
" you need to know exactly what the period is. Base on the above "
"calculation, if you set the period to 4095, then set pulse value to 2048 "
"is about 50% pulse width."
msgstr ""
"**Aber** was ist der Wert? Wenn Sie die PWM auf eine 50%-Pulsbreite "
"einstellen möchten, müssen Sie genau wissen, was die Periode ist. "
"Basierend auf der oben genannten Berechnung, wenn Sie die Periode auf "
"4095 einstellen, dann entspricht das Setzen des Puls-Wertes auf 2048 "
"ungefähr einer 50%-Pulsbreite."

#: ../onboard_mcu.rst:92
msgid "``0x20``"
msgstr "``0x20``"

#: ../onboard_mcu.rst:92
msgid "Set PWM channel 0 **On Value**"
msgstr "PWM-Kanal 0 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:94
msgid "``0x21``"
msgstr "``0x21``"

#: ../onboard_mcu.rst:94
msgid "Set PWM channel 1 **On Value**"
msgstr "PWM-Kanal 1 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:96
msgid "``0x22``"
msgstr "``0x22``"

#: ../onboard_mcu.rst:96
msgid "Set PWM channel 2 **On Value**"
msgstr "PWM-Kanal 2 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:98
msgid "``0x23``"
msgstr "``0x23``"

#: ../onboard_mcu.rst:98
msgid "Set PWM channel 3 **On Value**"
msgstr "PWM-Kanal 3 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:100
msgid "``0x24``"
msgstr "``0x24``"

#: ../onboard_mcu.rst:100
msgid "Set PWM channel 4 **On Value**"
msgstr "PWM-Kanal 4 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:102
msgid "``0x25``"
msgstr "``0x25``"

#: ../onboard_mcu.rst:102
msgid "Set PWM channel 5 **On Value**"
msgstr "PWM-Kanal 5 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:104
msgid "``0x26``"
msgstr "``0x26``"

#: ../onboard_mcu.rst:104
msgid "Set PWM channel 6 **On Value**"
msgstr "PWM-Kanal 6 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:106
msgid "``0x27``"
msgstr "``0x27``"

#: ../onboard_mcu.rst:106
msgid "Set PWM channel 7 **On Value**"
msgstr "PWM-Kanal 7 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:108
msgid "``0x28``"
msgstr "``0x28``"

#: ../onboard_mcu.rst:108
msgid "Set PWM channel 8 **On Value**"
msgstr "PWM-Kanal 8 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:110
msgid "``0x29``"
msgstr "``0x29``"

#: ../onboard_mcu.rst:110
msgid "Set PWM channel 9 **On Value**"
msgstr "PWM-Kanal 9 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:112
msgid "``0x2A``"
msgstr "``0x2A``"

#: ../onboard_mcu.rst:112
msgid "Set PWM channel 10 **On Value**"
msgstr "PWM-Kanal 10 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:114
msgid "``0x2B``"
msgstr "``0x2B``"

#: ../onboard_mcu.rst:114
msgid "Set PWM channel 11 **On Value**"
msgstr "PWM-Kanal 11 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:116
msgid "``0x2C``"
msgstr "``0x2C``"

#: ../onboard_mcu.rst:116
msgid "Set Motor 2 speed **On Value**"
msgstr "Geschwindigkeit von Motor 2 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:118
msgid "``0x2D``"
msgstr "``0x2D``"

#: ../onboard_mcu.rst:118
msgid "Set Motor 1 speed **On Value**"
msgstr "Geschwindigkeit von Motor 1 **Einschaltwert** einstellen"

#: ../onboard_mcu.rst:122
msgid "Prescaler"
msgstr "Vorteiler"

#: ../onboard_mcu.rst:124
msgid ""
"Register from 0x40 is to set the PWM prescaler. ranges from 0~65535. "
"There are only 4 timers for all 14 channels. See `PWM Timer(IMPORTANT)`_"
msgstr ""
"Register ab 0x40 dienen zur Einstellung des PWM-Vorteilers. Der Bereich "
"umfasst 0~65535. Es gibt nur 4 Timer für alle 14 Kanäle. Siehe `PWM "
"Timer(WICHTIG)`_"

#: ../onboard_mcu.rst:132
msgid "``0x40``"
msgstr "``0x40``"

#: ../onboard_mcu.rst:132
msgid "Set timer 0 **Prescaler**"
msgstr "Timer 0 **Vorteiler** einstellen"

#: ../onboard_mcu.rst:134
msgid "``0x41``"
msgstr "``0x41``"

#: ../onboard_mcu.rst:134
msgid "Set timer 1 **Prescaler**"
msgstr "Timer 1 **Vorteiler** einstellen"

#: ../onboard_mcu.rst:136
msgid "``0x42``"
msgstr "``0x42``"

#: ../onboard_mcu.rst:136
msgid "Set timer 2 **Prescaler**"
msgstr "Timer 2 **Vorteiler** einstellen"

#: ../onboard_mcu.rst:138
msgid "``0x43``"
msgstr "``0x43``"

#: ../onboard_mcu.rst:138
msgid "Set timer 3 **Prescaler**"
msgstr "Timer 3 **Vorteiler** einstellen"

#: ../onboard_mcu.rst:142
msgid "Period"
msgstr "Periode"

#: ../onboard_mcu.rst:144
msgid ""
"Register from 0x44 is to set the PWM period. ranges from 0~65535. There "
"are only 4 timers for all 14 channels. See `PWM Timer(IMPORTANT)`_"
msgstr ""
"Register ab 0x44 dienen zur Einstellung der PWM-Periode. Der Bereich "
"umfasst 0~65535. Es gibt nur 4 Timer für alle 14 Kanäle. Siehe `PWM "
"Timer(WICHTIG)`_"

#: ../onboard_mcu.rst:152
msgid "``0x44``"
msgstr "``0x44``"

#: ../onboard_mcu.rst:152
msgid "Set timer 0 **Period**"
msgstr "Timer 0 **Periode** einstellen"

#: ../onboard_mcu.rst:154
msgid "``0x45``"
msgstr "``0x45``"

#: ../onboard_mcu.rst:154
msgid "Set timer 1 **Period**"
msgstr "Timer 1 **Periode** einstellen"

#: ../onboard_mcu.rst:156
msgid "``0x46``"
msgstr "``0x46``"

#: ../onboard_mcu.rst:156
msgid "Set timer 2 **Period**"
msgstr "Timer 2 **Periode** einstellen"

#: ../onboard_mcu.rst:158
msgid "``0x47``"
msgstr "``0x47``"

#: ../onboard_mcu.rst:158
msgid "Set timer 3 **Period**"
msgstr "Timer 3 **Periode** einstellen"

#: ../onboard_mcu.rst:162
msgid "PWM Timer(IMPORTANT)"
msgstr "PWM-Timer(WICHTIG)"

#: ../onboard_mcu.rst:164
msgid ""
"What is PWM Timer? PWM Timer is a tool to turn on and off the PWM channel"
" for you."
msgstr ""
"Was ist ein PWM-Timer? Der PWM-Timer ist ein Werkzeug, um den PWM-Kanal "
"für Sie ein- und auszuschalten."

#: ../onboard_mcu.rst:166
msgid ""
"The MCU only have 4 timers for PWM: which means you cannot set frequency "
"on different channels at with the same timer."
msgstr ""
"Der MCU hat nur 4 Timer für PWM: Das bedeutet, Sie können die Frequenz "
"nicht für verschiedene Kanäle mit demselben Timer einstellen."

#: ../onboard_mcu.rst:169
msgid ""
"Example: if you set frequency on channel 0, channel 1, 2, 3 will be "
"affected. If you change channel 2 frequency, channel 0, 1, 3 will be "
"override."
msgstr ""
"Beispiel: Wenn Sie die Frequenz auf Kanal 0 einstellen, werden die Kanäle"
" 1, 2, 3 beeinflusst. Wenn Sie die Frequenz von Kanal 2 ändern, werden "
"die Kanäle 0, 1, 3 überschrieben."

#: ../onboard_mcu.rst:172
msgid ""
"This happens like if you want to control both a passive buzzer (who "
"changes frequency all the time) and servo (who needs a fix frequency of "
"50Hz). Then you should seperate them into two different timer."
msgstr ""
"Dies geschieht beispielsweise, wenn Sie sowohl einen passiven Summer (der"
" ständig die Frequenz ändert) als auch einen Servo (der eine feste "
"Frequenz von 50 Hz benötigt) steuern möchten. Dann sollten Sie diese auf "
"zwei verschiedene Timer aufteilen."

#: ../onboard_mcu.rst:178
msgid "Timer"
msgstr "Timer"

#: ../onboard_mcu.rst:178
msgid "PWM Channel"
msgstr "PWM-Kanal"

#: ../onboard_mcu.rst:180
msgid "Timer 0"
msgstr "Timer 0"

#: ../onboard_mcu.rst:180
msgid "0, 1, 2, 3"
msgstr "0, 1, 2, 3"

#: ../onboard_mcu.rst:182
msgid "Timer 1"
msgstr "Timer 1"

#: ../onboard_mcu.rst:182
msgid "4, 5, 6, 7"
msgstr "4, 5, 6, 7"

#: ../onboard_mcu.rst:184
msgid "Timer 2"
msgstr "Timer 2"

#: ../onboard_mcu.rst:184
msgid "8, 9, 10, 11"
msgstr "8, 9, 10, 11"

#: ../onboard_mcu.rst:186
msgid "Timer 3"
msgstr "Timer 3"

#: ../onboard_mcu.rst:186
msgid "12, 13(for motors)"
msgstr "12, 13 (für Motoren)"

#: ../onboard_mcu.rst:190
msgid "Example"
msgstr "Beispiel"

#: ../onboard_mcu.rst:210
msgid "Reset MCU"
msgstr "MCU zurücksetzen"

#: ../onboard_mcu.rst:212
msgid ""
"Currently the firmware reads a fix 3 byte value, then it can return ADC "
"values or control PWM. Thats why ADC register need 3byte with the latter "
"2 byte is 0."
msgstr ""
"Derzeit liest die Firmware einen festen 3-Byte-Wert, dann kann sie ADC-"
"Werte zurückgeben oder PWM steuern. Deshalb benötigt das ADC-Register 3 "
"Byte, wobei die letzten 2 Byte 0 sind."

#: ../onboard_mcu.rst:215
msgid ""
"And if your program is interrupted in the middle of the communication, "
"the firmware may stuck and offset the data. Even we have timeout on "
"waiting on 3 byte datas."
msgstr ""
"Wenn Ihr Programm mitten in der Kommunikation unterbrochen wird, kann die"
" Firmware hängen bleiben und die Daten verschieben. Selbst wenn wir ein "
"Timeout beim Warten auf 3-Byte-Daten haben."

#: ../onboard_mcu.rst:217
msgid ""
"If so, you need to reset the MCU. To reset it. You can use the robot_hat "
"command:"
msgstr ""
"Wenn dies der Fall ist, müssen Sie den MCU zurücksetzen. Um ihn "
"zurückzusetzen, können Sie den Befehl robot_hat verwenden:"

#: ../onboard_mcu.rst:223
msgid "Or you can do it in your python code:"
msgstr "Oder Sie können es in Ihrem Python-Code tun:"

#: ../onboard_mcu.rst:230
msgid ""
"Or you can just pull down the reset pin (GPIO 5) for 10 ms, then pull it "
"back up for another 10ms, as that's what ``reset_mcu`` dose."
msgstr ""
"Oder Sie können einfach den Reset-Pin (GPIO 5) für 10 ms herunterziehen "
"und dann für weitere 10 ms wieder hochziehen, denn das ist es, was "
"``reset_mcu`` macht."

